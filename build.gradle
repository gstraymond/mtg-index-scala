group 'fr.gstraymond'
version '1.0-SNAPSHOT'

apply plugin: 'scala'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url "http://repo.typesafe.com/typesafe/releases/" }
}

// https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples/scala

def scalaVersion = "2.11"

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'ch.qos.logback:logback-classic:1.+'
    compile "org.scala-lang:scala-library:$scalaVersion.+"
    compile "org.scala-lang:scala-compiler:$scalaVersion.+"
    compile "com.typesafe.play:play-json_$scalaVersion:2.+"
    runtime "org.codehaus.groovy:groovy:2.4.+"
    compile 'org.jsoup:jsoup:1.8.+'
    testCompile "org.specs2:specs2-core_$scalaVersion:3.+"
    testCompile "org.specs2:specs2-junit_$scalaVersion:3.+"
    testCompile "junit:junit:4.+"
}

task importer(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.ImportTask'
    description "Import data"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task cardConvert(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.CardConvertTask'
    description "convert raw card -> mtg card"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task fullScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.FullScrapTask'
    description "Scrap cards + prices"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task cardScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.CardScrapTask'
    description "Scrap cards"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task priceScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.PriceScrapTask'
    description "Scrap prices"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task priceProcess(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.PriceProcessTask'
    description "Process prices"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task formatScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.FormatScrapTask'
    description "Scrap formats"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    systemProperties 'logback.configurationFile': new File(projectDir, 'src/test/resources/logback-test.groovy').absolutePath
}


// START SNIPPET use-zinc
tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}
// END SNIPPET use-zinc

// START SNIPPET adjust-memory
tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}
// END SNIPPET adjust-memory