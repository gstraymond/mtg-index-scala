group 'fr.gstraymond'
version '1.0-SNAPSHOT'

apply plugin: 'scala'
apply plugin: 'application'

repositories {
    mavenLocal()
    maven { url "http://repo1.maven.org/maven2" }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'http://repo.typesafe.com/typesafe/releases' }
}

def scalaVersion = "2.12"

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'ch.qos.logback:logback-classic:1.2.+'
    compile "org.scala-lang:scala-library:$scalaVersion.+"
    compile "org.scala-lang:scala-compiler:$scalaVersion.+"
    compile "com.typesafe.play:play-json_$scalaVersion:2.6.+"
    runtime "org.codehaus.groovy:groovy:2.4.+"
    compile 'org.jsoup:jsoup:1.11.+'
    compile "net.databinder.dispatch:dispatch-core_$scalaVersion:0.13.+"
    compile "eu.bitwalker:UserAgentUtils:1.+"
    compile "ai.x:play-json-extensions_$scalaVersion:0.10.+"
    testCompile "org.specs2:specs2-core_$scalaVersion:3.+"
    testCompile "org.specs2:specs2-junit_$scalaVersion:3.+"
    testCompile "junit:junit:4.+"
}

mainClassName = 'fr.gstraymond.task.DEALTask'

task priceScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.PriceScrapTask'
    description "Scrap prices"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task priceProcess(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.PriceProcessTask'
    description "Process prices"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task formatScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.FormatScrapTask'
    description "Scrap formats"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task rulesScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.RulesScrapTask'
    description "Scrap rules"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task deleteCardIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.DeleteCardIndexTask'
    description "Delete Es Card Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task configureCardIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.ConfigureCardIndexTask'
    description "Configure Es Card Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task cardIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.CardIndexTask'
    description "Card Es Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    maxHeapSize = '512m'
}

task cardExists(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.CardExistsTask'
    description "Check card exists"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task deleteAutocompleteIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.DeleteAutocompleteIndexTask'
    description "Delete Es Autocomplete Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task configureAutocompleteIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.ConfigureAutocompleteIndexTask'
    description "Configure Es Autocomplete Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task autocompleteIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.AutocompleteIndexTask'
    description "Autocomplete Es Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    maxHeapSize = '512m'
}

task deleteRulesIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.DeleteRulesIndexTask'
    description "Delete Es Rules Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task configureRulesIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.ConfigureRulesIndexTask'
    description "Configure Es Rules Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task rulesIndex(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.RulesIndexTask'
    description "Rules Es Index"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    maxHeapSize = '512m'
}

task cardPictureDL(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.CardPictureDLTask'
    description "Download card picture"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task editionPictureDL(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.EditionPictureDLTask'
    description "Download edition picture"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task allSetScrap(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.AllSetScrapTask'
    description "MTG Json all sets parse"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task allSetConvert(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.AllSetConvertTask'
    description "MTG Json all sets convert"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task DEAL(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.DEALTask'
    description "DEAL"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    maxHeapSize = '1g'
}

// UTILS

task gif2png(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.Gif2PngConvertTask'
    description "convert gif 2 png"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task parseLogs(type: JavaExec, dependsOn: classes) {
    main = 'fr.gstraymond.task.ParseLogTask'
    description "parse logs"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

wrapper {
    version = '4.10.2'
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    systemProperties 'logback.configurationFile': new File(projectDir, 'src/test/resources/logback-test.groovy').absolutePath
}

// START SNIPPET adjust-memory
tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
    }
}
// END SNIPPET adjust-memory
